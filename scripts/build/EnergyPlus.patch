diff --git a/cmake/FindHELICS.cmake b/cmake/FindHELICS.cmake
index f5374bee5..819893807 100644
--- a/cmake/FindHELICS.cmake
+++ b/cmake/FindHELICS.cmake
@@ -1,6 +1,6 @@
 message("inside FindHELICS.cmake")
 include(FindPkgConfig)
-PKG_CHECK_MODULES(PC_HELICS "helicsSharedLib")# "helicsSharedLibd" "helics-shared" "helics-apps-shared")
+PKG_CHECK_MODULES(PC_HELICS "helics")
 message("PKG_CONFIG_FOUND=${PKG_CONFIG_FOUND}")
 message("PKG_CONFIG_EXECUTABLE=${PKG_CONFIG_EXECUTABLE}")
 message("PKG_CONFIG_VERSION_STRING=${PKG_CONFIG_VERSION_STRING}")
@@ -15,7 +15,7 @@ message("PC_HELICS_LIBDIR=${PC_HELICS_LIBDIR}")
 message("PC_HELICS_LIBRARY_DIRS=${PC_HELICS_LIBRARY_DIRS}")
 find_path(
     HELICS_INCLUDE_DIR
-    NAMES helics#/ValueFederate.hpp #Inputs.hpp Publications.hpp
+    NAMES helics
     HINTS ${PC_HELICS_INCLUDEDIR} ${PC_HELICS_INCLUDE_DIRS}
 )
 message("HELICS_INCLUDE_DIR=${HELICS_INCLUDE_DIR}")
@@ -25,7 +25,7 @@ message("HELICS_LIBRARY=${HELICS_LIBRARY}")
 
 find_library(
     HELICS_LIBRARY
-    NAMES helicsSharedLib # helics-shared helics-apps-shared
+    NAMES helics
     HINTS ${PC_HELICS_LIBDIR} ${PC_HELICS_LIBRARY_DIRS}
 )
 message("PC_HELICS_LIBDIR=${PC_HELICS_LIBDIR}")
diff --git a/src/EnergyPlus/ExternalInterface.cc b/src/EnergyPlus/ExternalInterface.cc
index 667e11bff..8057eca58 100644
--- a/src/EnergyPlus/ExternalInterface.cc
+++ b/src/EnergyPlus/ExternalInterface.cc
@@ -1298,8 +1298,8 @@ namespace EnergyPlus {
                 DisplayString("Number of inputs  in ExternalInterface = " + TrimSigDigits(nInpVar));
 
                 // launch the HELICS federate
-                fi.setProperty(helics_property_time_delta, deltat);
-                fi.setProperty(helics_property_int_max_iterations, 100);
+                fi.setProperty(HELICS_PROPERTY_TIME_DELTA, deltat);
+                fi.setProperty(HELICS_PROPERTY_INT_MAX_ITERATIONS, 100);
                 // read config file here.
                 std::string configFile;
                 char const* temp = getenv("HELICS_CONFIG_FILE");
@@ -1307,8 +1307,8 @@ namespace EnergyPlus {
                 	configFile = std::string(temp);
                 }
                 pHelicsFederate = new helicscpp::ValueFederate(configFile);
-                pHelicsFederate->setFlagOption(helics_flag_terminate_on_error, true);
-                pHelicsFederate->setFlagOption(helics_flag_slow_responding, false);
+                pHelicsFederate->setFlagOption(HELICS_FLAG_TERMINATE_ON_ERROR, true);
+                pHelicsFederate->setFlagOption(HELICS_FLAG_SLOW_RESPONDING, false);
                 int pub_count = pHelicsFederate->getPublicationCount();
                 int sub_count = pHelicsFederate->getInputCount();
                 pubs.allocate(pub_count);
@@ -1320,7 +1320,7 @@ namespace EnergyPlus {
                     for (int i = 0; i < pub_count; i++) {
                       helicscpp::Publication thispub = pHelicsFederate->getPublication(i);
                       if (thispub.isValid() ) {
-                    	auto pubkey = std::string(thispub.getKey());
+                        auto pubkey = std::string(thispub.getName());
                         //std::cout << " pub " << i << ":" << thispub.getInfo() << ":" << pubkey << ":" << thispub.getType() << ":" << thispub.getUnits() << std::endl;
                         vpubs.push_back(thispub);
                         pubs(i+1)=thispub;
@@ -1402,7 +1402,7 @@ namespace EnergyPlus {
 //                  pHelicsFederate->enterExecutingMode();
                 }
 
-                helics_time delta = pHelicsFederate->getTimeProperty(helics_property_time_period);
+                HelicsTime delta = pHelicsFederate->getTimeProperty(HELICS_PROPERTY_TIME_PERIOD);
                 // FNCS time delta is already in minutes, not nanoseconds
                 //delta = delta / (60ULL * 1000000000ULL);
                 //helics time is in seconds
@@ -3341,7 +3341,7 @@ namespace EnergyPlus {
             int i; // Loop counter
 
             int nDblWri; // number of doubles to write to socket
-            helics_time preSimTim; // previous time step's simulation time
+            HelicsTime preSimTim; // previous time step's simulation time
 
             static bool firstCall(true);
 
@@ -3351,7 +3351,7 @@ namespace EnergyPlus {
                 DisplayString("ExternalInterface starts first data exchange. (HELICS)");
                 simulationStatus = 2;
                 preSimTim = 0; // In the first call, E+ did not reset SimTimeSteps to zero
-                helics_time cTime = helicsFederateGetCurrentTime(pHelicsFederate->baseObject(), NULL);
+                HelicsTime cTime = helicsFederateGetCurrentTime(pHelicsFederate->baseObject(), NULL);
                 //helics_time cTime = pHelicsFederate->getCurrentTime();
                 //std::cout << "current time is: " << cTime << std::endl;
                 if (preSimTim != cTime) {
@@ -3364,7 +3364,7 @@ namespace EnergyPlus {
                 preSimTim = SimTimeSteps * MinutesPerTimeStep;
                 //std::cout << "preSimTim: " << preSimTim << ", SimTimeSteps: " << SimTimeSteps << ", MinutesPerTimeStep: " << MinutesPerTimeStep << std::endl;
                 preSimTim = preSimTim * 60;
-                helics_time time_returned = pHelicsFederate->requestTime(preSimTim);
+                HelicsTime time_returned = pHelicsFederate->requestTime(preSimTim);
                 //std::cout << "requested time: " << preSimTim << ", returned time: " << time_returned << std::endl;
                 if (preSimTim != time_returned) {
                     ShowFatalError("helics::requestTime() was interrupted with earlier time");
@@ -3375,7 +3375,7 @@ namespace EnergyPlus {
 
             //DisplayString( "preSimTim=" + TrimSigDigits( preSimTim ) );
 
-//            helics_time time_returned = pHelicsFederate->requestTime(preSimTim);
+//            HelicsTime time_returned = pHelicsFederate->requestTime(preSimTim);
 //            std::cout << "requested time: " << preSimTim << ", returned time: " << time_returned << std::endl;
 //            if (preSimTim != time_returned) {
 //                ShowFatalError("helics::requestTime() was interrupted with earlier time");
